# ===============================
# APPLICATION SETTING
# ===============================
spring.application.name=order-service
server.port=2634

# ===============================
# EUREKA CLIENT
# ===============================
eureka.client.serviceUrl.defaultZone=http://${EUREKA_USER:eureka}:${EUREKA_PASSWORD:password}@${DISCOVERY_SERVER:localhost:8761}/eureka

## ===============================
## ZIPKIN SERVER
## ===============================
spring.zipkin.base-url=${ZIPKIN_SERVER:http://localhost:9411}
spring.sleuth.sampler.probability=1.0

## ===============================
## OpenAPI Definition
## ===============================
springdoc.api-docs.path=${API_DOCS_PATH:/api-docs}
api.info.version=${API_INFO_VERSION:1.0}
api.info.terms-of-service=${API_INFO_TERMS:https://software.com.vn/terms/}
api.info.contact.name=${API_INFO_CONTACT_NAME:SOFTWARE CO., LTD}
api.info.contact.email=${API_INFO_CONTACT_EMAIL:contact@software.com.vn}
api.info.contact.url=${API_INFO_CONTACT_URL:https://software.com.vn/}
api.info.license.name=${API_INFO_LICENSE_NAME:Apache 2.0}
api.info.license.url=${API_INFO_LICENSE_URL:http://www.apache.org/licenses/LICENSE-2.0.html}
api.info.title=Order API Service
api.info.description=API to fetch order details for application

# ===============================
# DATABASE
# ===============================
spring.datasource.url=jdbc:mysql://${MYSQL_URL:localhost:3306/order-service}
spring.datasource.username=${MYSQL_USER:mysql}
spring.datasource.password=${MYSQL_PASSWORD:password}

# ===============================
# JPA / HIBERNATE
# ===============================
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5Dialect
spring.user.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.jpa.show-sql=false
spring.jpa.hibernate.ddl-auto=update

# ===============================
# Tuning Hikari Pool
# 1000ms / query time = single connection could handle req/sec
# ===============================
spring.datasource.hikari.autoCommit=${HIKARI_AUTO_COMMIT:true}
spring.datasource.hikari.connectionTimeout=${HIKARI_CONNECTION_TIMEOUT:30000}   #maximum number of milliseconds that a client will wait for a connection
spring.datasource.hikari.idleTimeout=${HIKARI_IDLE_TIMEOUT:30000}               #maximum idle time for connection
spring.datasource.hikari.keepaliveTime=${HIKARI_KEEP_ALIVE_TIME:30000}          #time attempt to keep a connection alive
spring.datasource.hikari.maxLifetime=${HIKARI_MAX_LIFETIME:30000}               #maximum lifetime in milliseconds of a connection in the pool after it is closed.
spring.datasource.hikari.minimumIdle=${HIKARI_MINIMUM_IDLE:10}                  #minimum number of idle connections maintained by HikariCP in a connection pool
spring.datasource.hikari.maximumPoolSize=${HIKARI_MAXIMUM_POOL_SIZE:20}         #maximum pool size
spring.datasource.hikari.poolName=${HIKARI_POOL_NAME:API-POOL}                  #connection pool name

# ===============================
# ACTUATOR ENDPOINTS & PROMETHEUS
# ===============================
management.endpoints.web.exposure.include=*
management.endpoint.health.show-details=always
management.health.circuitbreakers.enabled=true
management.health.ratelimiters.enabled=true

# ===============================
# KAFKA PRODUCER
# ===============================
kafka.bootstrap.servers=${KAFKA_SERVER:localhost:29092}

# ===============================
# Resilience4J Circuit Breakers
# ===============================
resilience4j.circuitbreaker.instances.inventory.failure-rate-threshold=50
resilience4j.circuitbreaker.instances.inventory.minimum-number-of-calls=5
resilience4j.circuitbreaker.instances.inventory.automatic-transition-from-open-to-half-open-enabled=true
resilience4j.circuitbreaker.instances.inventory.wait-duration-in-open-state=5s
resilience4j.circuitbreaker.instances.inventory.permitted-number-of-calls-in-half-open-state=3
resilience4j.circuitbreaker.instances.inventory.sliding-window-size=10
resilience4j.circuitbreaker.instances.inventory.sliding-window-type=count_based

# Timeout properties
resilience4j.timelimiter.metrics.enabled=true
resilience4j.timelimiter.instances.inventory.timeout-duration=3s
resilience4j.timelimiter.instances.inventory.cancel-running-future=true

# Retry properties
resilience4j.retry.instances.inventory.max-attempts=3
resilience4j.retry.instances.inventory.wait-duration=5s
